name: PR Dashboard

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  analyze:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          pip install bandit flake8 requests

      - name: Run Bandit Security Scan
        run: bandit -r . -f json -o bandit_report.json || true

      - name: Run Flake8 Lint
        run: flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics > lint_report.txt || true

      - name: Compute Metrics and Update Dashboard
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 <<'EOF'
          import json, os, time, requests

          repo = os.getenv("GITHUB_REPOSITORY")
          headers = {"Authorization": f"token {os.getenv('GITHUB_TOKEN')}"}

          def safe_get(url):
              r = requests.get(url, headers=headers)
              return r.json() if r.status_code == 200 else []

          # --- Bandit Report ---
          bandit_issues, bandit_summary = 0, []
          if os.path.exists("bandit_report.json"):
              with open("bandit_report.json") as f:
                  data = json.load(f)
                  results = data.get("results", [])
                  bandit_issues = len(results)
                  bandit_summary = [
                      {
                          "msg": i["issue_text"],
                          "severity": i["issue_severity"],
                          "line": i["line_number"],
                          "file": i["filename"]
                      }
                      for i in results[:5]
                  ]

          # --- Lint Report ---
          lint_warnings, lint_summary = 0, []
          if os.path.exists("lint_report.txt"):
              with open("lint_report.txt") as f:
                  lines = f.readlines()
                  lint_warnings = len(lines)
                  lint_summary = [l.strip() for l in lines[:5]]

          # --- CodeQL & Dependabot Alerts via GitHub API ---
          codeql_alerts = safe_get(f"https://api.github.com/repos/{repo}/code-scanning/alerts?state=open")
          dependabot_alerts = safe_get(f"https://api.github.com/repos/{repo}/dependabot/alerts?state=open")

          codeql_summary = [{"desc": a["rule"]["description"], "severity": a["rule"]["security_severity_level"]} for a in codeql_alerts[:5]]
          dependabot_summary = [{"package": a["dependency"]["package"]["name"], "severity": a["security_vulnerability"]["severity"]} for a in dependabot_alerts[:5]]

          # --- Compute Risk Score ---
          risk_score = bandit_issues * 2 + lint_warnings * 1 + len(codeql_alerts) * 3 + len(dependabot_alerts) * 2
          if risk_score < 10:
              risk_label = "Low"
          elif risk_score < 30:
              risk_label = "Medium"
          else:
              risk_label = "High"

          # --- Build Dashboard Entry ---
          dashboard_entry = {
              "timestamp": time.strftime("%Y-%m-%d %H:%M:%S"),
              "bandit": {"issues": bandit_issues, "summary": bandit_summary},
              "lint": {"warnings": lint_warnings, "summary": lint_summary},
              "codeql": {"alerts": len(codeql_alerts), "summary": codeql_summary},
              "dependabot": {"alerts": len(dependabot_alerts), "summary": dependabot_summary},
              "risk_score": risk_score,
              "risk_level": risk_label
          }

          os.makedirs("docs", exist_ok=True)
          dashboard_file = "docs/dashboard.json"
          if os.path.exists(dashboard_file):
              with open(dashboard_file) as f:
                  data = json.load(f)
          else:
              data = {"history": []}

          data["last_update"] = dashboard_entry["timestamp"]
          data["history"].append(dashboard_entry)

          with open(dashboard_file, "w") as f:
              json.dump(data, f, indent=2)

          print("âœ… Updated dashboard.json successfully!")
          EOF

      - name: Commit Dashboard Update
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add docs/dashboard.json
          git commit -m "Update dashboard metrics [skip ci]" || echo "No changes"
          git push
