name: PR Summary & Metrics Dashboard

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  pr_summary:
    name: Generate PR Summary and Metrics
    runs-on: ubuntu-latest

    permissions:
      contents: read
      pull-requests: write
      security-events: read

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10

      - name: Install Dependencies
        run: |
          pip install bandit pylint pytest requests

      - name: Run Tests
        id: tests
        run: |
          pytest > test_output.txt || true
          FAILED=$(grep -c "FAILURES" test_output.txt || true)
          echo "tests_failed=$FAILED" >> $GITHUB_OUTPUT

      - name: Run Bandit (Security Scan)
        id: bandit
        run: |
          bandit -r . -f json > bandit_output.json || true
          COUNT=$(jq '.results | length' bandit_output.json)
          echo "bandit_issues=$COUNT" >> $GITHUB_OUTPUT

      - name: Run Lint (Pylint)
        id: lint
        run: |
          pylint $(git ls-files '*.py') > lint_output.txt || true
          WARNINGS=$(grep -c "warning" lint_output.txt || true)
          echo "lint_warnings=$WARNINGS" >> $GITHUB_OUTPUT

      - name: Run CodeQL Analysis
        id: codeql
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:python"
        continue-on-error: true

      - name: Count CodeQL Alerts
        id: codeql_alerts
        run: |
          ALERTS=$(gh api repos/${{ github.repository }}/code-scanning/alerts --paginate | jq '[.[] | select(.state=="open")] | length')
          echo "codeql_alerts=$ALERTS" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Count Dependabot Alerts
        id: dependabot
        run: |
          ALERTS=$(gh api repos/${{ github.repository }}/dependabot/alerts --paginate | jq '[.[] | select(.state=="open")] | length')
          echo "dependabot_alerts=$ALERTS" >> $GITHUB_OUTPUT
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Calculate Risk Score
        id: risk
        run: |
          SCORE=$((100 - (${{ steps.bandit.outputs.bandit_issues }} * 5 + ${{ steps.lint.outputs.lint_warnings }} * 2 + ${{ steps.tests.outputs.tests_failed }} * 10)))
          if [ $SCORE -lt 0 ]; then SCORE=0; fi
          echo "risk_score=$SCORE" >> $GITHUB_OUTPUT

      - name: Generate PR Summary Comment
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          message: |
            ### 🧾 PR Summary — Commit ${{ github.sha }}
            ⏱️ _Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC')_

            **Title:** ${{ github.event.pull_request.title }}  
            **Author:** @${{ github.actor }}  
            **Files Changed:** ${{ github.event.pull_request.changed_files }}  
            **Additions:** ${{ github.event.pull_request.additions }}  
            **Deletions:** ${{ github.event.pull_request.deletions }}

            #### 🧪 Test & Security Metrics
            | Metric | Value |
            |--------|--------|
            | ✅ Risk Score | ${{ steps.risk.outputs.risk_score }}/100 |
            | 🧩 Tests Failed | ${{ steps.tests.outputs.tests_failed }} |
            | 🔒 Bandit Issues | ${{ steps.bandit.outputs.bandit_issues }} |
            | ⚠️ Lint Warnings | ${{ steps.lint.outputs.lint_warnings }} |
            | 🧠 CodeQL Alerts | ${{ steps.codeql_alerts.outputs.codeql_alerts }} |
            | 🛡️ Dependabot Alerts | ${{ steps.dependabot.outputs.dependabot_alerts }} |

            📊 **[Open Dashboard →](https://your-dashboard-link.example.com)**

