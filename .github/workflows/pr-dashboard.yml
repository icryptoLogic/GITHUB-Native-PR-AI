name: PR Dashboard

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write
  security-events: read
  issues: read

jobs:
  pr-dashboard:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest bandit flake8 requests jq

      - name: Run Pytest
        run: pytest -q > pytest_results.txt || true

      - name: Run Bandit (security)
        run: bandit -r src > bandit_report.txt || true

      - name: Run Flake8 (lint)
        run: flake8 src > lint_report.txt || true

      - name: Compute Metrics
        id: metrics
        run: |
          tests_failed=$(grep -c "FAILED" pytest_results.txt || true)
          bandit_issues=$(grep -c "Issue:" bandit_report.txt || true)
          lint_issues=$(wc -l < lint_report.txt || echo 0)
          risk=$(( (bandit_issues * 5) + (tests_failed * 10) + (lint_issues * 2) ))
          [ $risk -gt 100 ] && risk=100

          if [ $risk -lt 40 ]; then emoji="🟢"
          elif [ $risk -lt 75 ]; then emoji="🟡"
          else emoji="🔴"; fi

          echo "risk=$risk" >> $GITHUB_OUTPUT
          echo "emoji=$emoji" >> $GITHUB_OUTPUT
          echo "tests_failed=$tests_failed" >> $GITHUB_OUTPUT
          echo "bandit_issues=$bandit_issues" >> $GITHUB_OUTPUT
          echo "lint_issues=$lint_issues" >> $GITHUB_OUTPUT

      - name: Fetch CodeQL & Dependabot Metrics
        id: security
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          codeql_count=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/code-scanning/alerts?state=open | jq '. | length')

          dependabot_count=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/dependabot/alerts?state=open | jq '. | length')

          echo "codeql_count=$codeql_count" >> $GITHUB_OUTPUT
          echo "dependabot_count=$dependabot_count" >> $GITHUB_OUTPUT

      - name: Update Dashboard JSON
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          mkdir -p docs
          file="docs/dashboard.json"
          sha_short=$(git rev-parse --short HEAD)
          timestamp=$(date -u "+%Y-%m-%d %H:%M:%S UTC")

          new_entry=$(jq -n \
            --arg id "$PR_NUMBER" \
            --arg branch "$BRANCH_NAME" \
            --arg sha "$sha_short" \
            --arg time "$timestamp" \
            --arg risk "${{ steps.metrics.outputs.risk }}" \
            --arg emoji "${{ steps.metrics.outputs.emoji }}" \
            --arg tests "${{ steps.metrics.outputs.tests_failed }}" \
            --arg bandit "${{ steps.metrics.outputs.bandit_issues }}" \
            --arg lint "${{ steps.metrics.outputs.lint_issues }}" \
            --arg codeql "${{ steps.security.outputs.codeql_count }}" \
            --arg dependabot "${{ steps.security.outputs.dependabot_count }}" \
            --arg title "${{ github.event.pull_request.title }}" \
            --arg author "${{ github.event.pull_request.user.login }}" \
            --arg additions "${{ github.event.pull_request.additions }}" \
            --arg deletions "${{ github.event.pull_request.deletions }}" \
            --arg changed "${{ github.event.pull_request.changed_files }}" \
            '{id:$id, branch:$branch, sha:$sha, time:$time, risk:$risk, emoji:$emoji,
              tests_failed:$tests, bandit:$bandit, lint:$lint, codeql:$codeql, dependabot:$dependabot,
              title:$title, author:$author, additions:$additions, deletions:$deletions,
              changed_files:$changed}')

          if [ -f "$file" ]; then
            jq ". += [$new_entry] | sort_by(.time) | .[-5:]" "$file" > tmp.json && mv tmp.json "$file"
          else
            echo "[$new_entry]" > "$file"
          fi

      - name: Commit Dashboard JSON
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/dashboard.json
          git commit -m "🔄 Update PR dashboard metrics [skip ci]" || echo "No changes"
          git push

      - name: Post PR Summary Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          BRANCH_NAME: ${{ github.head_ref }}
        run: |
          sha_short=$(git rev-parse --short HEAD)
          timestamp=$(date -u "+%Y-%m-%d %H:%M:%S UTC")

          summary="### 🧩 Commit Summary (\`${BRANCH_NAME}\` – \`${sha_short}\`)
⏱️ ${timestamp}

| Metric | Value |
|--------|-------|
| **Risk Score** | ${{ steps.metrics.outputs.emoji }} ${{ steps.metrics.outputs.risk }} / 100 |
| 🧩 Tests Failed | ${{ steps.metrics.outputs.tests_failed }} |
| 🔐 Bandit Issues | ${{ steps.metrics.outputs.bandit_issues }} |
| 🧹 Lint Warnings | ${{ steps.metrics.outputs.lint_issues }} |
| 🛡️ CodeQL Alerts | ${{ steps.security.outputs.codeql_count }} |
| 📦 Dependabot Alerts | ${{ steps.security.outputs.dependabot_count }} |"

          curl -s -X POST \
            -H "Authorization: token $GITHUB_TOKEN" \
            -d "{\"body\": \"$summary\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"

      - name: Comment Dashboard Link
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "📊 Live Dashboard"
          message: |
            View the full AI PR Dashboard here:  
            👉 https://icryptologic.github.io/GITHUB-Native-PR-AI/
