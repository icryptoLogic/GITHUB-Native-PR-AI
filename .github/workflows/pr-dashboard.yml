name: PR Dashboard

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]

permissions:
  contents: write
  pull-requests: write
  security-events: read
  issues: read

jobs:
  pr-dashboard:
    runs-on: ubuntu-latest

    steps:
      # --- Checkout PR branch ---
      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      # --- Set up Python ---
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest bandit flake8 requests jq

      # --- Run Static & Test Checks ---
      - name: Run Pytest
        run: pytest -q > pytest_results.txt || true

      - name: Run Bandit (security)
        run: bandit -r src > bandit_report.txt || true

      - name: Run Flake8 (lint)
        run: flake8 src > lint_report.txt || true

      # --- Compute Local Metrics ---
      - name: Compute Metrics
        id: metrics
        run: |
          tests_failed=$(grep -c "FAILED" pytest_results.txt || true)
          bandit_issues=$(grep -c "Issue:" bandit_report.txt || true)
          lint_issues=$(wc -l < lint_report.txt || echo 0)
          risk=$(( (bandit_issues * 5) + (tests_failed * 10) + (lint_issues * 2) ))
          [ $risk -gt 100 ] && risk=100

          if [ "$risk" -le 30 ]; then
            indicator="🟢"
          elif [ "$risk" -le 70 ]; then
            indicator="🟡"
          else
            indicator="🔴"
          fi

          echo "risk=$risk" >> $GITHUB_OUTPUT
          echo "indicator=$indicator" >> $GITHUB_OUTPUT
          echo "tests_failed=$tests_failed" >> $GITHUB_OUTPUT
          echo "bandit_issues=$bandit_issues" >> $GITHUB_OUTPUT
          echo "lint_issues=$lint_issues" >> $GITHUB_OUTPUT

      # --- Fetch CodeQL & Dependabot Metrics ---
      - name: Fetch CodeQL & Dependabot Metrics
        id: security
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
        run: |
          codeql_count=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/code-scanning/alerts?state=open | jq '. | length')
          dependabot_count=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            https://api.github.com/repos/$REPO/dependabot/alerts?state=open | jq '. | length')

          echo "codeql_count=$codeql_count" >> $GITHUB_OUTPUT
          echo "dependabot_count=$dependabot_count" >> $GITHUB_OUTPUT

      # --- Post PR Summary Comment (up to 5 per PR) ---
      - name: Post PR Summary Comment
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          sha_short=$(git rev-parse --short HEAD)
          timestamp=$(date -u "+%Y-%m-%d %H:%M:%S UTC")

          summary=$(cat <<EOF
---
### 🧾 PR Summary (Commit: \`${sha_short}\`)
⏱️ ${timestamp}

**Title:** ${{ github.event.pull_request.title }}  
**Author:** @${{ github.event.pull_request.user.login }}  
**Files Changed:** ${{ github.event.pull_request.changed_files }}  
**Additions:** ${{ github.event.pull_request.additions }}  
**Deletions:** ${{ github.event.pull_request.deletions }}

#### 🧪 Test & Security Metrics
| Metric | Value |
|--------|-------|
| **${{ steps.metrics.outputs.indicator }} Risk Score** | ${{ steps.metrics.outputs.risk }} / 100 |
| 🧩 Tests Failed | ${{ steps.metrics.outputs.tests_failed }} |
| 🔐 Bandit Issues | ${{ steps.metrics.outputs.bandit_issues }} |
| 🧹 Lint Warnings | ${{ steps.metrics.outputs.lint_issues }} |
| 🛡️ CodeQL Alerts | ${{ steps.security.outputs.codeql_count }} |
| 📦 Dependabot Alerts | ${{ steps.security.outputs.dependabot_count }} |
---
EOF
)

          summary_escaped=$(echo "$summary" | jq -Rs .)
          curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -X POST \
            -d "{\"body\": $summary_escaped}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"

      # --- Keep only last 5 PR summaries ---
      - name: Clean up old PR summaries
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
        run: |
          comments_json=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments?per_page=100")

          summary_ids=$(echo "$comments_json" | jq -r '.[] | select(.user.login=="github-actions[bot]") | select(.body | startswith("---")) | .id')

          total=$(echo "$summary_ids" | wc -l)
          echo "Found $total PR summary comments."

          if [ "$total" -gt 5 ]; then
            remove=$(echo "$summary_ids" | head -n $(($total - 5)))
            echo "Deleting $((total - 5)) old summaries..."
            for id in $remove; do
              curl -s -H "Authorization: token $GITHUB_TOKEN" \
                -X DELETE \
                "https://api.github.com/repos/${{ github.repository }}/issues/comments/$id"
            done
          else
            echo "No cleanup needed."
          fi

      # --- Save PR JSON Summary ---
      - name: Save PR summary JSON
        run: |
          mkdir -p reports
          cat <<EOF > reports/pr_summary_${{ github.event.pull_request.number }}.json
          {
            "id": "${{ github.event.pull_request.number }}",
            "sha": "$(git rev-parse --short HEAD)",
            "timestamp": "$(date -u "+%Y-%m-%d %H:%M:%S UTC")",
            "title": "${{ github.event.pull_request.title }}",
            "author": "${{ github.event.pull_request.user.login }}",
            "additions": "${{ github.event.pull_request.additions }}",
            "deletions": "${{ github.event.pull_request.deletions }}",
            "changed_files": "${{ github.event.pull_request.changed_files }}",
            "risk": "${{ steps.metrics.outputs.risk }}",
            "bandit": "${{ steps.metrics.outputs.bandit_issues }}",
            "lint": "${{ steps.metrics.outputs.lint_issues }}",
            "tests_failed": "${{ steps.metrics.outputs.tests_failed }}",
            "codeql": "${{ steps.security.outputs.codeql_count }}",
            "dependabot": "${{ steps.security.outputs.dependabot_count }}"
          }
          EOF
          cp reports/pr_summary_${{ github.event.pull_request.number }}.json reports/latest.json

      # --- Append to dashboard.json (Keep full history) ---
      - name: Update dashboard data
        run: |
          mkdir -p docs
          if [ -f docs/dashboard.json ]; then
            jq ". + [$(cat reports/latest.json)]" docs/dashboard.json > docs/tmp.json
            mv docs/tmp.json docs/dashboard.json
          else
            echo "[ $(cat reports/latest.json) ]" > docs/dashboard.json
          fi

          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/dashboard.json
          git commit -m "Append PR #${{ github.event.pull_request.number }} data" || echo "No changes"
          git push

      # --- Sticky Dashboard Link Comment ---
      - name: Comment Dashboard Link
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: "📊 Live Dashboard"
          message: |
            View full PR Dashboard here:  
            👉 https://icryptologic.github.io/GITHUB-Native-PR-AI/
